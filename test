my $RING = q:to/EOF/;
         ###
       ##   ##
      #       #
     #         #
     #         #
    #           #
    #           #
    #           #
     #         #
     #         #
      #       #
       ##   ##
         ###
    EOF

my $CROSS = q:to/EOF/;
    ##      ##
     ##    ##
      ##  ##
       ####
       ####
      ##  ##
     ##    ##
    ##      ##
    EOF

sub coords($s) {
    my @coords;
    for $s.lines.kv -> $y, $l {
        for $l.comb.kv -> $x, $c {
            if $c eq '#' {
                push @coords, [$x, $y];
            }
        }
    }
    return @coords;
}

my @ring-coords = coords($RING);
my @cross-coords = coords($CROSS);
@cross-coords»[0] »+=» 2;
@cross-coords»[1] »+=» 4;

my %invalid;
sub invalidate($n) {
    %invalid{$n}++;
}

my $step;
my @recording;

sub ghost_at(@coords, $x, $y) {
    return if $step >= @recording;
    for @recording[$step].kv -> $i, @c {
        next unless @coords[$i][0] == -1;
        return True if $x == @c[0] && $y == @c[1];
    }
}

sub show(@coords) {
    my $mx = max @coords»[0];
    my $my = max @coords»[1];

    sub coords_at($x, $y) {
        grep { $x == @coords[$_][0] && $y == @coords[$_][1] }, ^@coords;
    }

    for 0..$my -> $y {
        for 0..$mx -> $x {
            my @n = coords_at($x, $y);
            print
                @n > 1 ?? 'X' !!
                @n == 1 ?? '#' !!
                ghost_at(@coords, $x, $y) ?? '.' !!
                           ' ';
            if @n > 1 {
                invalidate($_) for @n;
            }
        }
        say '';
    }
    say '';
}

sub show-invalid(@coords) {
    my $mx = max @coords»[0];
    my $my = max @coords»[1];

    sub coords_at($x, $y) {
        grep { $x == @coords[$_][0] && $y == @coords[$_][1] }, ^@coords;
    }

    for 0..$my -> $y {
        for 0..$mx -> $x {
            my @n = coords_at($x, $y);
            print @n > 1 ?? 'X' !! @n == 1 ?? (%invalid{@n[0]} ?? '!' !! '#') !! ' ';
        }
        say '';
    }
    say '';
}

my @coords = @ring-coords;

sub arrived {
    for @coords Z @cross-coords -> @c, @t {
        if @c[0] != -1 && @c !eqv @t {
            return False;
        }
    }
    return True;
}

sub directions($sx, $sy) {
    if $sx == 0 && $sy == 0 {
        return;
    }
    elsif $sx == 0 {
        return [0, $sy], [0, -$sy];
    }
    elsif $sy == 0 {
        return [$sx, 0], [-$sx, 0];
    }
    else {
        return ([$sx, 0], [0, $sy]).pick(*), ([-$sx, 0], [0, -$sy]).pick(*);
    }
}

@recording = [] xx @coords;

loop {
    $step = 0;
    show(@coords);

    until arrived() {
        sleep 0.5;

        for @coords Z @cross-coords Z (^@coords) -> @c, @t, $i {
            next if @c[0] == -1;
            my $sx = sign(@t[0] - @c[0]);
            my $sy = sign(@t[1] - @c[1]);
            for directions($sx, $sy) -> [$dx, $dy] {
                my $nx = @c[0] + $dx;
                my $ny = @c[1] + $dy;
                next if ghost_at(@coords, $nx, $ny);
                @c = $nx, $ny;
                last;
            }
#             if Bool.pick {
#                 if @c[0] != @t[0] {
#                     @c[0] += sign(@t[0] - @c[0]);
#                 }
#                 elsif @c[1] != @t[1] {
#                     @c[1] += sign(@t[1] - @c[1]);
#                 }
#             }
#             else {
#                 if @c[1] != @t[1] {
#                     @c[1] += sign(@t[1] - @c[1]);
#                 }
#                 elsif @c[0] != @t[0] {
#                     @c[0] += sign(@t[0] - @c[0]);
#                 }
#             }
            push @recording[$i], [@c];
        }

        show(@coords);
        $step++;
    }

    show-invalid(@coords);

    @coords = coords($RING);
    for @coords.kv -> $i, @c {
        if %invalid{$i} {
            @recording[$i] = [];
        }
        else {
            @c[0] = -1;
        }
    }
    %invalid = ();
}
